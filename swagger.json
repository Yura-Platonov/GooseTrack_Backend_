{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "GooseTrack Api",
    "description": "Time management To-do app"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "http://localhost:4000" },
    { "url": "https://goosetrack-backend-y622.onrender.com" }
  ],
  "tags": [
    { "name": "Auth", "description": "Users endpoints" },
    { "name": "Tasks", "description": "Tasks endpoints" },
    { "name": "Reviews", "description": "Reviews endpoints" }
  ],

  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthNotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterConflictResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify": {
      "post": {
        "tags": ["Auth"],
        "summary": "Verification email",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyBadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "User login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or token verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user info",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/update": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update current user info",
        "parameters": [],
        "requestBody": {
          "description": "User parameters object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReviewsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/reviews/own": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get review created by the current user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "summary": "Adds review by the user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Object for add user review",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or token verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Updates review by the user",
        "parameters": [],
        "requestBody": {
          "description": "Updates review by the user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Delete review",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Delete review"
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/task": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get review created by the current user",
        "parameters": [
          {
            "in": "query",
            "name": "year",
            "description": "Year of the tasks",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "month",
            "description": "Month of the tasks",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllTasksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing year or month",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Add task by the user",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Object for add task",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access errors (authorization or token verification)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/task/{taskId}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of task that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Object for update task",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateTaskRequest" }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete Task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of task that needs to be deleted task",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operations",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DeleteTaskResponse" }
              }
            }
          },
          "401": {
            "description": "Authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Review not found for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["username", "email", "password"],
        "properties": {
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "User Name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "file"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "User Name"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday date",
            "example": "YYYY-MM-DD"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+380971234567"
          },
          "skype": {
            "type": "string",
            "description": "User's Skype link",
            "example": "SkypeName"
          }
        }
      },
      "VerifyRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "ReviewRequest": {
        "type": "object",
        "required": ["name", "comment", "stars"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Volodymyr Shvets"
          },
          "comment": {
            "type": "string",
            "example": "A good, visual time planning program."
          },
          "stars": {
            "type": "number",
            "example": "5"
          },
          "avatarURL": {
            "type": "string",
            "example": "//www.gravatar.com/avatar/1cbe9c273ac85b7137525ac33d0a52b7"
          }
        }
      },
      "UpdateReviewRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "example": "A good, visual time planning program."
          },
          "stars": {
            "type": "number",
            "example": "5"
          }
        }
      },
      "TaskRequest": {
        "type": "object",
        "required": ["title", "start", "end", "priority", "date", "category"],
        "properties": {
          "title": {
            "type": "string",
            "example": "task 1"
          },
          "start": {
            "type": "string",
            "example": "09:30"
          },
          "end": {
            "type": "number",
            "example": "10:00"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "example": "medium"
          },
          "date": {
            "type": "string",
            "example": "YYYY-MM-DD"
          },
          "category": {
            "type": "string",
            "enum": ["to-do", "in-progress", "done"],
            "example": "to-do"
          }
        }
      },
      "UpdateTaskRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "task 1"
          },
          "start": {
            "type": "string",
            "example": "09:30"
          },
          "end": {
            "type": "number",
            "example": "10:00"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "example": "medium"
          },
          "date": {
            "type": "string",
            "example": "YYYY-MM-DD"
          },
          "category": {
            "type": "string",
            "enum": ["to-do", "in-progress", "done"],
            "example": "to-do"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification letter was send to you email."
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Backend access token"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "652d5e5c23186b57ab8c082b"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "User Name"
          },
          "birthday": {
            "type": "string",
            "description": "User`s birthday",
            "example": "YYYY-MM-DD"
          },
          "phone": {
            "type": "string",
            "description": "User`s phone number",
            "example": "+380971234567"
          },
          "skype": {
            "type": "string",
            "description": "User`s Skype link",
            "example": "SkypeName"
          },
          "avatarURL": {
            "type": "string",
            "description": "User`s avatar",
            "example": " "
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Logout success"
          }
        }
      },
      "LoginErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email or password is wrong"
          }
        }
      },
      "VerifyResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification email sent"
          }
        }
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad Request"
          }
        }
      },
      "VerifyBadRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad Request"
          }
        }
      },
      "AuthNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User not found"
          }
        }
      },
      "RegisterConflictResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email in use"
          }
        }
      },
      "LoginErrorRespons": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email or password is wrong"
          }
        }
      },
      "AuthErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not authorized"
          }
        }
      },
      "ReviewErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Review not found for this user"
          }
        }
      },
      "ServerErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Server error"
          }
        }
      },
      "GetReviewsResponse": {
        "type": "array",
        "description": "Array of all reviews",
        "items": {
          "$ref": "#/components/schemas/ReviewResponse"
        },
        "example": [
          {
            "_id": "652aafc986fbe66cdf186acb",
            "name": "Ihor Dronenko",
            "comment": "Really helps to increase productivity. The application has a clear interface and useful features. I like it at the initial stage. ",
            "stars": 5,
            "avatarURL": "//www.gravatar.com/avatar/1cbe9c273ac85b7137525ac33d0a52b7"
          },
          {
            "_id": "652aafc986fbe66cdf186acc",
            "name": "Volodymyr Shvets",
            "comment": "A good, visual time planning program.",
            "stars": 5,
            "avatarURL": "//www.gravatar.com/avatar/1cbe9c273ac85b7137525ac33d0a52b7"
          },
          {
            "_id": "652aafc986fbe66cdf186ad0",
            "name": "Pavlo Trunov",
            "comment": "A pleasant find for me. It's exactly what I was looking for. The main advantage is the visual visualization in the form of boards and cards. I recommend it!",
            "stars": 5,
            "avatarURL": "//www.gravatar.com/avatar/1cbe9c273ac85b7137525ac33d0a52b7"
          }
        ]
      },
      "ReviewResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "652aafc986fbe66cdf186acc"
          },
          "name": {
            "type": "string",
            "example": "Volodymyr Shvets"
          },
          "comment": {
            "type": "string",
            "example": "A good, visual time planning program."
          },
          "stars": {
            "type": "number",
            "example": "5"
          },
          "avatarURL": {
            "type": "string",
            "example": "//www.gravatar.com/avatar/1cbe9c273ac85b7137525ac33d0a52b7"
          }
        }
      },
      "GetAllTasksResponse": {
        "type": "array",
        "description": "Array of all tasks",
        "items": {
          "$ref": "#/components/schemas/TaskResponse"
        },
        "example": [
          {
            "_id": "6530774f6396da86abcb2377",
            "title": "task 1",
            "start": "09:00",
            "end": "10:00",
            "priority": "high",
            "date": "2023-10-19",
            "category": "to-do",
            "owner": "653073cdeae73ae04545da9d",
            "__v": 0
          },
          {
            "_id": "653078276396da86abcb2383",
            "title": "task 3",
            "start": "09:30",
            "end": "10:00",
            "priority": "medium",
            "date": "2023-10-25",
            "category": "to-do",
            "owner": "653073cdeae73ae04545da9d",
            "__v": 0
          }
        ]
      },
      "TaskResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "653078276396da86abcb2383"
          },
          "title": {
            "type": "string",
            "example": "task 1"
          },
          "start": {
            "type": "string",
            "example": "09:30"
          },
          "end": {
            "type": "number",
            "example": "10:00"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "example": "medium"
          },
          "date": {
            "type": "string",
            "example": "YYYY-MM-DD"
          },
          "category": {
            "type": "string",
            "enum": ["to-do", "in-progress", "done"],
            "example": "to-do"
          },
          "owner": {
            "type": "string",
            "example": "653073cdeae73ae04545da9d"
          },
          "__v": {
            "type": "number",
            "example": "0"
          }
        }
      },
      "TaskBadRequestErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Missing year or month"
          }
        }
      },
      "TaskErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Task not found"
          }
        }
      },
      "DeleteTaskResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Task deleted successfully"
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
